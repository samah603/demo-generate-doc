name: Reusable - Generate Deployment Document

# This workflow is triggered by a call from another workflow
on:
  workflow_call:
    # Define inputs that this workflow accepts
    inputs:
      version:
        description: 'The version tag being released'
        required: true
        type: string
    # Define secrets this workflow needs
    secrets:
      # Expect the standard GITHUB_TOKEN, which is passed via 'secrets: inherit'
      GITHUB_TOKEN:
        required: true

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout the code of the CALLER repository (where the release happens)
      # This is done automatically by GitHub when using a reusable workflow.
      - name: Checkout Caller's Repository Code
        uses: actions/checkout@v4

      # Step 2: Checkout THIS repository (the central one) to get access to its files
      # (template, python script, etc.)
      - name: Checkout Central Repo to Get Template/Script
        uses: actions/checkout@v4
        with:
          # This checks out 'samah603/demo-generate-doc' into the specified folder
          path: '.central-workflow-files'

      # Step 3: Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      # Step 4: Install Python dependencies
      - name: Install dependencies
        run: pip install python-docx

      # Step 5: Run the Python script to generate the document
      # The script will save the file with its original name for now
      - name: Replace placeholders in Word template
        run: |
          python .central-workflow-files/replace_placeholders.py
        env:
          # Pass inputs and other variables to the Python script as environment variables
          TAG_VERSION: ${{ inputs.version }}
          GITHUB_REPOSITORY: ${{ github.repository }} # This will be the caller's repo name

      # Step 6: Extract repository name from the SOURCE repo ('github.workflow_repository')
      - name: Extract repository name
        id: get_repo_name
        run: echo "name=$(echo '${{ github.workflow_repository }}' | cut -d'/' -f2 | cut -d'-' -f3-)" >> $GITHUB_OUTPUT

      # Step 7: Rename the generated file to include the repository name
      - name: Rename document for release
        run: |
          mv WI_VDOOTTHUB_Deployment_${{ inputs.version }}.docx WI_VDOOTTHUB_Deployment_${{ steps.get_repo_name.outputs.name }}_${{ inputs.version }}.docx

      # Step 8: Upload the RENAMED document to the release on the CALLER repository
      - name: Upload document to GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ inputs.version }}
          # The filename now includes the dynamic repository name
          files: WI_VDOOTTHUB_Deployment_${{ steps.get_repo_name.outputs.name }}_${{ inputs.version }}.docx
        env:
          # Use the GITHUB_TOKEN received from the secrets
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
